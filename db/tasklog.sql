-- MySQL Script generated by MySQL Workbench
-- Mon Mar 30 12:10:38 2015
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
-- -----------------------------------------------------
-- Schema SearchTaskLog
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Table `user`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `user` (
  `userid` INT NOT NULL COMMENT 'Internal ID for users',
  `username` VARCHAR(45) NOT NULL,
  `password` VARCHAR(45) NOT NULL,
  `token` VARCHAR(200) NOT NULL COMMENT 'If the user does not log in, this should be used to identify the unique user.',
  `IP` VARCHAR(45) NULL COMMENT 'As an extra way to keep track of the user',
  `role` VARCHAR(45) NOT NULL COMMENT 'The role of the user. It can be a subject, an admin, or an annotator.',
  `activated` TINYINT(1) NOT NULL COMMENT 'If the user is inactivated, then nothing should be recorded from this user. For example, if after an experiment the user forgets to turn off the logging extension then we should not keep logging the user.',
  PRIMARY KEY (`userid`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `user_profile`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `user_profile` (
  `userid` INT NOT NULL,
  `name` VARCHAR(45) NULL,
  `age` INT NULL,
  `education` VARCHAR(45) NULL,
  `profession` VARCHAR(45) NULL,
  `experienceSearch` INT NULL,
  `frequencySearch` VARCHAR(45) NULL,
  `searchFor` LONGTEXT NULL COMMENT 'What the user usually use search systems for. Free answer.',
  `otherInfo` LONGTEXT NULL COMMENT 'Used for additional questions per experiment.',
  PRIMARY KEY (`userid`),
  CONSTRAINT `user_profile_userid`
    FOREIGN KEY (`userid`)
    REFERENCES `user` (`userid`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Information about the user collected from questionnaires';


-- -----------------------------------------------------
-- Table `task`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `task` (
  `taskid` INT NOT NULL,
  `taskname` VARCHAR(45) NOT NULL COMMENT 'A short name of the task',
  `description` TEXT NOT NULL COMMENT 'A short description of the task',
  `timeCreated` DATETIME NOT NULL COMMENT 'Client time when the user created the task.',
  `timeCompleted` DATETIME NULL COMMENT 'Client time when the user completed the task.',
  `timeStored` TIMESTAMP NOT NULL COMMENT 'Server time when the task is stored. ',
  `timeStarted` DATETIME NULL COMMENT 'Client time when the user indicates that he/she starts the task.',
  `userid` INT NULL COMMENT 'The user who performs the task.',
  PRIMARY KEY (`taskid`),
  INDEX `userid_idx` (`userid` ASC),
  CONSTRAINT `task_userid`
    FOREIGN KEY (`userid`)
    REFERENCES `user` (`userid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Information of tasks';


-- -----------------------------------------------------
-- Table `task_hierarchy`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `task_hierarchy` (
  `taskid` INT NOT NULL,
  `supTask` INT NOT NULL DEFAULT -1 COMMENT 'The task id that is the supper task of the current task. If the current task is a root, then it points to -1',
  PRIMARY KEY (`taskid`),
  CONSTRAINT `task_hier_taskid`
    FOREIGN KEY (`taskid`)
    REFERENCES `task` (`taskid`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'The relation of tasks and subtasks. Tasks are organised as a tree. Each task points to a upper level task. If a task is a root, then it points to -1.';


-- -----------------------------------------------------
-- Table `query`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `query` (
  `queryid` BIGINT NOT NULL COMMENT 'Every issued query makes a new record. The same query can be repeatedly issued but each with a new queryid.',
  `query` TEXT NOT NULL COMMENT 'The query text.',
  `clientTime` DATETIME NOT NULL COMMENT 'The client time when the query is issued.',
  `timestamp` TIMESTAMP NOT NULL COMMENT 'The server time when the record is saved.',
  PRIMARY KEY (`queryid`))
ENGINE = InnoDB
COMMENT = 'Query information. Each query issued by an user at a time is an unique record; it doesn’t matter if the same query has been issued repeated. ';


-- -----------------------------------------------------
-- Table `anno_task_query`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `anno_task_query` (
  `taskid` INT NOT NULL,
  `userid` INT NOT NULL COMMENT 'The user who did the annotation.',
  `queryid` BIGINT NOT NULL COMMENT 'the query id associated with the task.',
  INDEX `userid_idx` (`userid` ASC),
  INDEX `anno_task_queryid_idx` (`queryid` ASC),
  CONSTRAINT `anno_task_queryid`
    FOREIGN KEY (`queryid`)
    REFERENCES `query` (`queryid`)
    ON DELETE NO ACTION
    ON UPDATE CASCADE,
  CONSTRAINT `anno_task_userid`
    FOREIGN KEY (`userid`)
    REFERENCES `user` (`userid`)
    ON DELETE NO ACTION
    ON UPDATE CASCADE,
  CONSTRAINT `anno_task_taskid`
    FOREIGN KEY (`taskid`)
    REFERENCES `task` (`taskid`)
    ON DELETE NO ACTION
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Annotation of the association between tasks and queries.';


-- -----------------------------------------------------
-- Table `searchLog`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `searchLog` (
  `userid` INT NOT NULL,
  `element` VARCHAR(45) NOT NULL,
  `event` VARCHAR(45) NOT NULL,
  `referer` TEXT NOT NULL COMMENT 'The HTTP referer that leads to the current url, using this to keep track of user path.',
  `refererType` VARCHAR(45) NOT NULL COMMENT 'Referer types: query, pagination, query suggestion, or result',
  `info` LONGTEXT NOT NULL COMMENT 'Information associated with the event.',
  `clientTime` DATETIME NOT NULL COMMENT 'The client time the event was logged.',
  `timestamp` TIMESTAMP NOT NULL COMMENT 'The server time when the event is logged.',
  `url` TEXT NOT NULL COMMENT 'The current url where the event happens.',
  `searchEngine` VARCHAR(45) NULL COMMENT 'The search engine used',
  INDEX `userid_idx` (`userid` ASC),
  CONSTRAINT `searchlog_userid`
    FOREIGN KEY (`userid`)
    REFERENCES `user` (`userid`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Search log of a user. \nDifferent types of events are logged, with different info.\n\n\n';


-- -----------------------------------------------------
-- Table `eventLog`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `eventLog` (
  `userid` INT NOT NULL,
  `element` VARCHAR(45) NOT NULL COMMENT 'The element that triggers the event.',
  `event` VARCHAR(45) NOT NULL COMMENT 'The event name, such as  query, click, tab open, focus',
  `referer` TEXT NOT NULL COMMENT 'The HTTP referer of the current event. E.g., if it’s a SERP open event then record where the source url is. This information can be used to reconstruct the user path.',
  `refererType` VARCHAR(45) NULL COMMENT 'What type of referer it is. For example, a url, a query, or something that leads to the current status.',
  `info` LONGTEXT NULL COMMENT 'Information associated with the event.',
  `clientTime` DATETIME NOT NULL COMMENT 'Client time when the event is logged.',
  `timestamp` TIMESTAMP NOT NULL COMMENT 'Server time the event is logged',
  `device` VARCHAR(45) NOT NULL COMMENT 'The device from which the event is logged, e.g., phone or computer.',
  INDEX `userid_idx` (`userid` ASC),
  CONSTRAINT `eventlog_userid`
    FOREIGN KEY (`userid`)
    REFERENCES `user` (`userid`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'The event log logs user activities with a browser or other online activity, e.g., with phone.';


-- -----------------------------------------------------
-- Table `anno_relevance`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `anno_relevance` (
  `userid` INT NOT NULL,
  `queryid` BIGINT NOT NULL,
  `url` TEXT NOT NULL COMMENT 'The url can be the search engine page itself, e.g., when the answer is directly given.',
  `relevance` INT NOT NULL COMMENT 'The relevance of the url to the query. ',
  `type` VARCHAR(45) NOT NULL COMMENT 'User may find the relevance information in 3 ways: summary — user find answer in summary; doc — user find the document relevant; direct — search engine gives direct answer',
  INDEX `userid_idx` (`userid` ASC),
  INDEX `queryid_idx` (`queryid` ASC),
  CONSTRAINT `anno_rel_userid`
    FOREIGN KEY (`userid`)
    REFERENCES `user` (`userid`)
    ON DELETE NO ACTION
    ON UPDATE CASCADE,
  CONSTRAINT `anno_rel_queryid`
    FOREIGN KEY (`queryid`)
    REFERENCES `query` (`queryid`)
    ON DELETE NO ACTION
    ON UPDATE CASCADE)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
